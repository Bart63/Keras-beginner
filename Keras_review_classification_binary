{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Keras_review_classification_binary","provenance":[],"authorship_tag":"ABX9TyOV/dNBXGz1E0FF6ck9LJDU"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"ckfwQ_YpDqdT","executionInfo":{"status":"ok","timestamp":1626553699427,"user_tz":-120,"elapsed":244,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}}},"source":["import numpy as np\n","from keras.datasets import imdb\n","from keras import models, layers, preprocessing, optimizers"],"execution_count":22,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uQFZdG1eD4Z4","executionInfo":{"status":"ok","timestamp":1626552160466,"user_tz":-120,"elapsed":6825,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"51c1bf58-8ebc-494e-9fac-bec3a949c7d2"},"source":["(train_data, train_labels), (test_data, test_labels) = imdb.load_data(num_words=10000)"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/imdb.npz\n","17465344/17464789 [==============================] - 0s 0us/step\n","17473536/17464789 [==============================] - 0s 0us/step\n"],"name":"stdout"},{"output_type":"stream","text":["<string>:6: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","/usr/local/lib/python3.7/dist-packages/keras/datasets/imdb.py:155: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_train, y_train = np.array(xs[:idx]), np.array(labels[:idx])\n","/usr/local/lib/python3.7/dist-packages/keras/datasets/imdb.py:156: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  x_test, y_test = np.array(xs[idx:]), np.array(labels[idx:])\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vVRtZPHKEDNe","executionInfo":{"status":"ok","timestamp":1626552174116,"user_tz":-120,"elapsed":5,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"69379f36-12f2-4009-eb2f-5d5dae364e38"},"source":["train_data.shape, test_data.shape"],"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((25000,), (25000,))"]},"metadata":{"tags":[]},"execution_count":3}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dsAQOSY7EIM2","executionInfo":{"status":"ok","timestamp":1626552240502,"user_tz":-120,"elapsed":248,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"85181a78-d1a3-4572-8438-66cd28c60eb2"},"source":["print(train_data[0], train_labels[0], sep='\\n')"],"execution_count":6,"outputs":[{"output_type":"stream","text":["[1, 14, 22, 16, 43, 530, 973, 1622, 1385, 65, 458, 4468, 66, 3941, 4, 173, 36, 256, 5, 25, 100, 43, 838, 112, 50, 670, 2, 9, 35, 480, 284, 5, 150, 4, 172, 112, 167, 2, 336, 385, 39, 4, 172, 4536, 1111, 17, 546, 38, 13, 447, 4, 192, 50, 16, 6, 147, 2025, 19, 14, 22, 4, 1920, 4613, 469, 4, 22, 71, 87, 12, 16, 43, 530, 38, 76, 15, 13, 1247, 4, 22, 17, 515, 17, 12, 16, 626, 18, 2, 5, 62, 386, 12, 8, 316, 8, 106, 5, 4, 2223, 5244, 16, 480, 66, 3785, 33, 4, 130, 12, 16, 38, 619, 5, 25, 124, 51, 36, 135, 48, 25, 1415, 33, 6, 22, 12, 215, 28, 77, 52, 5, 14, 407, 16, 82, 2, 8, 4, 107, 117, 5952, 15, 256, 4, 2, 7, 3766, 5, 723, 36, 71, 43, 530, 476, 26, 400, 317, 46, 7, 4, 2, 1029, 13, 104, 88, 4, 381, 15, 297, 98, 32, 2071, 56, 26, 141, 6, 194, 7486, 18, 4, 226, 22, 21, 134, 476, 26, 480, 5, 144, 30, 5535, 18, 51, 36, 28, 224, 92, 25, 104, 4, 226, 65, 16, 38, 1334, 88, 12, 16, 283, 5, 16, 4472, 113, 103, 32, 15, 16, 5345, 19, 178, 32]\n","1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SNGH2qvqEOBG","executionInfo":{"status":"ok","timestamp":1626552309353,"user_tz":-120,"elapsed":252,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"ad2e2b00-f831-4fb4-f8ba-36812cc44c53"},"source":["print(np.unique([len(d) for d in train_data]))"],"execution_count":7,"outputs":[{"output_type":"stream","text":["[  11   12   13 ... 1851 1854 2494]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Y29zeWNZEpPe","executionInfo":{"status":"ok","timestamp":1626552470282,"user_tz":-120,"elapsed":292,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}}},"source":["word_index = imdb.get_word_index()\n","word_index = {k:(v+3) for k,v in word_index.items()}\n","\n","for i in range(4):\n","  word_index['?'] = i\n","\n","reverse_word_index = dict([value, key] for (key, value) in word_index.items())\n","\n","def decode(text):\n","  return ' '.join([reverse_word_index.get(i, '?') for i in text])"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1nLA4i6dFPJG","executionInfo":{"status":"ok","timestamp":1626552605293,"user_tz":-120,"elapsed":292,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"22ed1277-237e-4010-e144-7e58df60ab55"},"source":["print(decode(train_data[0]), train_labels[0], sep='\\n')"],"execution_count":11,"outputs":[{"output_type":"stream","text":["? this film was just brilliant casting location scenery story direction everyone's really suited the part they played and you could just imagine being there robert ? is an amazing actor and now the same being director ? father came from the same scottish island as myself so i loved the fact there was a real connection with this film the witty remarks throughout the film were great it was just brilliant so much that i bought the film as soon as it was released for ? and would recommend it to everyone to watch and the fly fishing was amazing really cried at the end it was so sad and you know what they say if you cry at a film it must have been good and this definitely was also ? to the two little boy's that played the ? of norman and paul they were just brilliant children are often left out of the ? list i think because the stars that play them all grown up are such a big profile for the whole film but these children are amazing and should be praised for what they have done don't you think the whole story was so lovely because it was true and was someone's life after all that was shared with us all\n","1\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"FgLemO0aF27m","executionInfo":{"status":"ok","timestamp":1626553393582,"user_tz":-120,"elapsed":1978,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}}},"source":["processed_train_data = preprocessing.sequence.pad_sequences(train_data, value=0, \n","                                                  padding='post', \n","                                                  maxlen=300)\n","\n","processed_test_data = preprocessing.sequence.pad_sequences(test_data, value=0, \n","                                                  padding='post', \n","                                                  maxlen=300)"],"execution_count":16,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LaSHotxyIt_s","executionInfo":{"status":"ok","timestamp":1626553429917,"user_tz":-120,"elapsed":266,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"f629b7b0-2c4a-4d09-c90a-cd0b2d737c9d"},"source":["print(np.unique([len(d) for d in processed_train_data]))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["[300]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BLiF5lQqI1qY","executionInfo":{"status":"ok","timestamp":1626554250719,"user_tz":-120,"elapsed":290,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"92c5d0fc-f4f2-455c-fe30-43528722bd77"},"source":["network = models.Sequential()\n","network.add(layers.Embedding(10000, 16))\n","network.add(layers.GlobalAveragePooling1D())\n","network.add(layers.Dense(32, activation='relu'))\n","network.add(layers.Dense(1, activation='sigmoid'))\n","\n","network.summary()"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","embedding_1 (Embedding)      (None, None, 16)          160000    \n","_________________________________________________________________\n","global_average_pooling1d_1 ( (None, 16)                0         \n","_________________________________________________________________\n","dense_2 (Dense)              (None, 32)                544       \n","_________________________________________________________________\n","dense_3 (Dense)              (None, 1)                 33        \n","=================================================================\n","Total params: 160,577\n","Trainable params: 160,577\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ePXlL-urJc-9","executionInfo":{"status":"ok","timestamp":1626554251950,"user_tz":-120,"elapsed":4,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}}},"source":["network.compile(optimizer=optimizers.RMSprop(learning_rate=0.001), loss='binary_crossentropy', metrics=['accuracy'])"],"execution_count":34,"outputs":[]},{"cell_type":"code","metadata":{"id":"L35JqMTfKYa7","executionInfo":{"status":"ok","timestamp":1626554108231,"user_tz":-120,"elapsed":276,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}}},"source":["x_val = processed_train_data[:10000]\n","partial_x_train = processed_train_data[10000:]\n","\n","y_val = train_labels[:10000]\n","partial_y_train = train_labels[10000:]"],"execution_count":30,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DVpz_mU_KyZT","executionInfo":{"status":"ok","timestamp":1626554269801,"user_tz":-120,"elapsed":12732,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"0bd1bb9e-4030-4b4c-d45c-679e67515be5"},"source":["history = network.fit(partial_x_train, partial_y_train, epochs=15, batch_size=500, validation_data=(x_val, y_val))"],"execution_count":35,"outputs":[{"output_type":"stream","text":["Epoch 1/15\n","30/30 [==============================] - 2s 30ms/step - loss: 0.6919 - accuracy: 0.5640 - val_loss: 0.6870 - val_accuracy: 0.6899\n","Epoch 2/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.6835 - accuracy: 0.6777 - val_loss: 0.6742 - val_accuracy: 0.7559\n","Epoch 3/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.6674 - accuracy: 0.7658 - val_loss: 0.6560 - val_accuracy: 0.7510\n","Epoch 4/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.6467 - accuracy: 0.7744 - val_loss: 0.6311 - val_accuracy: 0.7749\n","Epoch 5/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.6169 - accuracy: 0.7980 - val_loss: 0.6025 - val_accuracy: 0.7866\n","Epoch 6/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.5851 - accuracy: 0.8071 - val_loss: 0.5704 - val_accuracy: 0.7959\n","Epoch 7/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.5479 - accuracy: 0.8248 - val_loss: 0.5380 - val_accuracy: 0.8099\n","Epoch 8/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.5133 - accuracy: 0.8306 - val_loss: 0.5032 - val_accuracy: 0.8223\n","Epoch 9/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.4744 - accuracy: 0.8449 - val_loss: 0.4702 - val_accuracy: 0.8337\n","Epoch 10/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.4378 - accuracy: 0.8590 - val_loss: 0.4401 - val_accuracy: 0.8403\n","Epoch 11/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.4037 - accuracy: 0.8687 - val_loss: 0.4129 - val_accuracy: 0.8477\n","Epoch 12/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.3764 - accuracy: 0.8758 - val_loss: 0.3886 - val_accuracy: 0.8553\n","Epoch 13/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.3462 - accuracy: 0.8847 - val_loss: 0.3686 - val_accuracy: 0.8607\n","Epoch 14/15\n","30/30 [==============================] - 1s 20ms/step - loss: 0.3240 - accuracy: 0.8866 - val_loss: 0.3515 - val_accuracy: 0.8644\n","Epoch 15/15\n","30/30 [==============================] - 1s 21ms/step - loss: 0.3028 - accuracy: 0.8937 - val_loss: 0.3362 - val_accuracy: 0.8693\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FyFbuuh2K-Yj","executionInfo":{"status":"ok","timestamp":1626554275146,"user_tz":-120,"elapsed":2978,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"97c04739-7883-4c87-eaf3-602c1d98a0eb"},"source":["results = network.evaluate(processed_test_data, test_labels)\n","print(results)"],"execution_count":36,"outputs":[{"output_type":"stream","text":["782/782 [==============================] - 2s 2ms/step - loss: 0.3465 - accuracy: 0.8632\n","[0.3465479612350464, 0.8631600141525269]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"id":"olfiKgUNL7pj","executionInfo":{"status":"ok","timestamp":1626556398720,"user_tz":-120,"elapsed":296,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"32aac7df-45e8-442e-c3eb-12d9b11ab090"},"source":["import matplotlib.pyplot as plt\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","\n","plt.plot(epochs, loss, 'bo', label='training loss')\n","plt.plot(epochs, val_loss, 'b', label='validation loss')\n","plt.legend()\n","plt.show()"],"execution_count":47,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"z4wkm31kSUbx","executionInfo":{"status":"ok","timestamp":1626557251451,"user_tz":-120,"elapsed":535,"user":{"displayName":"Bart Durys","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgDE_QYny7NanK7QnzDPX1AVcI9za0JY1_I743tZQ=s64","userId":"12894914645040795172"}},"outputId":"c424d37a-2741-40e2-9e4c-db66ad51c104"},"source":["plt.plot(epochs, acc, 'bo', label='training acc')\n","plt.plot(epochs, val_acc, 'b', label='validation acc')"],"execution_count":50,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<matplotlib.lines.Line2D at 0x7fe5f7bda3d0>]"]},"metadata":{"tags":[]},"execution_count":50},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"NFzXYnoFS0yv"},"source":[""],"execution_count":null,"outputs":[]}]}